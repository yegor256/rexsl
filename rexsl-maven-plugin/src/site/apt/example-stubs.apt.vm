 ------
 Run-time stubs
 ------
 Yegor Bugayenko
 ------
 2011-10-27
 ------

~~
~~ Copyright (c) 2011-2013, ReXSL.com
~~ All rights reserved.
~~
~~ Redistribution and use in source and binary forms, with or without
~~ modification, are permitted provided that the following conditions
~~ are met: 1) Redistributions of source code must retain the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer. 2) Redistributions in binary form must reproduce the above
~~ copyright notice, this list of conditions and the following
~~ disclaimer in the documentation and/or other materials provided
~~ with the distribution. 3) Neither the name of the ReXSL.com nor
~~ the names of its contributors may be used to endorse or promote
~~ products derived from this software without specific prior written
~~ permission.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
~~ NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
~~ FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
~~ THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
~~ INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
~~ (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
~~ SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
~~ HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
~~ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
~~ ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
~~ OF THE POSSIBILITY OF SUCH DAMAGE.
~~
~~ @version $Id$
~~

How to add extra functionality during tests?

  For example, you want to test your application's behavior when
  some unexpected runtime exception is happening. You need to inject
  a special block of code into your application during tests that will
  throw such an exception, and your test scripts will validate application
  behavior. We can do it with test stubs located together with your test
  classes:

+--
/foo
  pom.xml
  /src
    /main
    /test
      /java
        /foo
          HomeTest.java
          RuntimeExceptionStub.java
      /rexsl
        /scripts
          WhatIfRuntimeException.groovy
+--

  This is how <<<RuntimeExceptionStub.java>>> may look like:

+--
package foo;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
@Path("/runtime-exception")
public class RuntimeExceptionStub {
  @GET
  public String throwIt() {
    throw new IllegalStateException("hello, world!");
  }
}
+--

  This is how we may test it from <<<WhatIfRuntimeException.groovy>>>:

+--
import com.rexsl.test.ApacheRequest
import com.rexsl.test.RestResponse
new ApacheRequest(rexsl.home)
    .fetch()
    .as(RestResponse.class)
    .assertStatus(HttpURLConnection.HTTP_OK)
+--

  The test should pass, and may be extended with additional validations. We
  may check what exactly is returned, how this page is formatted, etc. The
  same way as you check regular pages/responses.

