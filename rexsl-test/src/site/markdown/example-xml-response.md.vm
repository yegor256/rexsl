# Managing XML Responses

When your HTTP
[`Response`](./apidocs-${project.version}/com/rexsl/test/Response.html)
contains an XML document, it is convenient to use
[`XmlResponse`](./apidocs-${project.version}/com/rexsl/test/response/XmlResponse.html)
decorator to manipulate it, for example:

```java
String name = new JdkRequest("http://my.example.com")
  .fetch()
  .as(XmlResponse.class)
  .assertXPath("/data/name") // AssertionError if this XPath is absent
  .xml() // convert HTTP body to com.jcabi.xml.XML
  .xpath("/data/name/text()").get(0);
```

Method [`XmlResponse#xml()`](./apidocs-${project.version}/com/rexsl/test/XmlResponse.html)
converts HTTP body to an instance of class
[`XML`](http://xml.jcabi.com/apidocs-0.6/com/jcabi/xml/XML.html)
from [jcabi-xml](http://xml.jcabi.com) project.

Don't forget to add this dependency to your classpath:

```xml
<dependency>
  <groupId>com.jcabi</groupId>
  <artifactId>jcabi-xml</artifactId>
  <version>0.6</version>
</dependency>
```

Read also about
[`RestResponse`](./apidocs-${project.version}/com/rexsl/test/response/RestResponse.html),
which helps you to manage default HTTP response concepts.
